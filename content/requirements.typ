#import "/utils/todo.typ": TODO
#import "/utils/goal.typ": GOAL

= Requirements
#TODO[
  This chapter follows the Requirements Analysis Document Template in @bruegge2004object. Important: Make sure that the whole chapter is independent of the chosen technology and development platform. The idea is that you illustrate concepts, taxonomies and relationships of the application domain independent of the solution domain! Cite @bruegge2004object several times in this chapter.

]
#GOAL[
  - Clearly domain-focused, tailored to general medical imaging requirements, with references to Synlab as a specific motivation/example
  - Go into the Synlab use case and describe that this pathology image sharing process system is an exemplary use case the architecture we will develop in chapter 5 can be implemented and evaluated.
  - Functional and nonfunctional requirements outlined independently of technology
]

== Overview
#TODO[
  Provide a short overview about the purpose, scope, objectives and success criteria of the system that you like to develop.
]
#GOAL[
  - Purpose
    - Provide a scalable and efficient solution for sharing large-scale pathology scans (20–30 GB per file) among medical experts globally.
    - Overcome current limitations posed by proprietary image formats and vendor-specific cloud platforms.
    - Enable fast, secure, and reliable second-opinion diagnostic workflows in digital pathology.
  - Scope
    - The system will facilitate secure and efficient upload, storage, and sharing of large pathology imaging files.
    - It will integrate seamlessly into existing clinical workflows by leveraging standard medical imaging protocols (DICOM, DICOMweb).
    - Out of scope
      - Direct replacement or modification of existing medical imaging scanners and laboratory hardware.
      - Full integration or replacement of existing hospital-wide PACS/LIS infrastructures.
  - Objectives
    - Reduce scan sharing time significantly (from hours to under x minutes).
    - Ensure interoperability with existing medical imaging standards (DICOM/DICOMweb).
    - Provide a vendor-neutral, cloud-based architecture supporting remote diagnostics workflows securely.
    - Facilitate ease of use for imaging technicians, clinicians, and remote diagnostic specialists.
  - Sucess criterias
    - Pathology scan transfer and retrieval completed consistently within the target time frame.
    - System validation demonstrates potential seamless interoperability with clinical PACS and LIS (might be mocked).
    - Positive usability feedback from stakeholders (imaging technicians, clinicians, external experts).
    - (Compliance with regulatory and security standards (GDPR, HIPAA, data encryption at rest and in transit).) - maybe, might be too much and didn't propose in proposal
]

== Existing System
#TODO[
  This section is only required if the proposed system (i.e. the system that you develop in the thesis) should replace an existing system.
]
#GOAL[
  - Pathology scans (20–30 GB) are currently stored in a proprietary format generated by imaging scanners.
  - Scans must be uploaded to the manufacturer's proprietary cloud platform.
  - File transfers to external experts often take several hours, delaying critical diagnostic workflows.
  - Existing solutions are vendor-locked, inflexible, and not interoperable with other systems.
  - Limitations of Current Workflow:
    - Slow and unreliable data transfers (hours per file).
    - Lack of interoperability (cannot use different scanners with vendor platform), leading to inefficiencies.
    - Dependency on closed, proprietary software environments, restricting collaboration.
]

== Requirements
#TODO[
  If you leave out the section “Existing system”, you can rename this section into “Requirements”.
]
#GOAL[
  - Functional and nonfunctional requirements outlined independently of technology.
  - Renamed 'Proposed System' to 'Requirements' as the existing system is important in the case of Synlab but the proposed system architecture will be developed in section 5
]

=== Functional Requirements
#TODO[
  List and describe all functional requirements of your system. Also mention requirements that you were not able to realize. The short title should be in the form “verb objective”

  - FR1 Short Title: Short Description. 
  - FR2 Short Title: Short Description. 
  - FR3 Short Title: Short Description.
]
#GOAL[
  - FR1 Upload Pathology Scans: Allow secure and rapid upload of large medical images (>20 GB per scan).
  - FR2 Share Scans Externally: Enable authorized external experts worldwide to quickly access high-resolution pathology scans.
  - FR3 Integrate Clinical Systems: Provide seamless integration with clinical workflows (PACS, LIS) using DICOM/DICOMweb standards.
  - FRs that are maybe not realized in the end but still considered
    - FRX Automatic Image Conversion: Direct automated conversion of all proprietary formats was excluded due to time/resource constraints.
    - FRX Manage Access and Permissions: Facilitate role-based access control (RBAC) tailored to clinicians, imaging technicians, and external experts.
    - FRX Notify Stakeholders: Automatically inform involved stakeholders (experts, clinicians) when scans are available or accessed.
]

=== Nonfunctional Requirements
#TODO[
  List and describe all nonfunctional requirements of your system. Also mention requirements that you were not able to realize. Categorize them using the FURPS+ model described in @bruegge2004object without the category functionality that was already covered with the functional requirements.

  - NFR1 Category: Short Description. 
  - NFR2 Category: Short Description. 
  - NFR3 Category: Short Description.

]
#GOAL[
  - Usability
    - NFR1 Intuitive Interface: User interface must be intuitive for clinical and technical users without extensive training.
  - Reliability
    - NFR2 Fault-Tolerance: System must support resumable uploads/downloads reliably despite network interruptions.
  - Performance
    - NFR3 Data Transfer Efficiency: Transfers completed consistently under x minutes per file (20–30 GB).
    - NFR4 Scalability: System performance remains stable under increased concurrent usage (multiple simultaneous uploads/downloads).
  - NFRs that are maybe not realized in the end but still considered
    - Supportability
      - NFRX Ease of Maintenance: Easy deployment of system updates without causing significant downtime (target x min).
      - Security & Compliance
        - NFRX Regulatory Compliance: System must fully adhere to GDPR and HIPAA compliance guidelines.
        - NFRX Secure Data Transmission: All medical data transmitted must be encrypted (TLS).
        - NFRX Auditability: Support detailed logging for auditing purposes (user access logs, data actions).   
]

== System Models
#TODO[
  This section includes important system models for the requirements.
]

=== Scenarios
#TODO[
  If you do not distinguish between visionary and demo scenarios, you can remove the two subsubsections below and list all scenarios here.

  *Visionary Scenarios*
  Describe 1-2 visionary scenario here, i.e. a scenario that would perfectly solve your problem, even if it might not be realizable. Use free text description.

  *Demo Scenarios*
  Describe 1-2 demo scenario here, i.e. a scenario that you can implement and demonstrate until the end of your thesis. Use free text description.
]
#GOAL[
  - Visionary Scenarios
    - Global Real-Time Diagnostic Collaboration: A pathologist requests a second opinion, and experts globally can immediately view and collaborate on scans in real-time without latency or format issues.
  - Demo Scenarios
    - Rapid Scan Sharing Workflow: Imaging technician uploads pathology scan to cloud system; external expert accesses and views scan remotely within x minutes, clearly demonstrating reduced latency compared to existing methods.
]

=== Use Case Model
#TODO[
  This subsection should contain a UML Use Case Diagram including roles and their use cases. You can use colors to indicate priorities. Think about splitting the diagram into multiple ones if you have more than 10 use cases. *Important:* Make sure to describe the most important use cases using the use case table template (./tex/use-case-table.tex). Also describe the rationale of the use case model, i.e. why you modeled it like you show it in the diagram.
]
#GOAL[
  - Actors
    - Imaging Technician
    - Pathologist (internal clinician)
    - External Diagnostic expert
  - Use Cases (UML Use Case Diagram)
    - UC1 Upload Pathology Scans
    - UC2 Request Expert Second Opinion
    - UC3 Retrieve and Review Scans
    - use cases that are maybe not realized in the end but still considered
      - UCX Manage User Roles and Permissions (needs System Administrator as actor)
      - UCX Receive Notifications
]

=== Analysis Object Model
#TODO[
  This subsection should contain a UML Class Diagram showing the most important objects, attributes, methods and relations of your application domain including taxonomies using specification inheritance (see @bruegge2004object). Do not insert objects, attributes or methods of the solution domain. *Important:* Make sure to describe the analysis object model thoroughly in the text so that readers are able to understand the diagram. Also write about the rationale how and why you modeled the concepts like this.

]
#GOAL[
  - Domain Objects (UML Class Diagram)
    - (Patient (attributes: ID, name, anonymization status)) - Still unsure if needed since we may only work with fully anonymized data and this data is managed in LIS
    - PathologyScan (attributes: scan ID, format, file size, upload timestamp, DICOM metadata)
    - Clinician/User (attributes: user ID, role) - maybe also permissions
    - ExternalExpert (inherits from Clinician/User; specific attributes: affiliated institution) - probably makes sense to merge with clinician since it clinicians should also be able to give 2nd opinion, clarify this
    - DiagnosticReport (attributes: associated scan, comments, timestamps, status)
]

=== Dynamic Model
#TODO[
  This subsection should contain dynamic UML diagrams. These can be a UML state diagrams, UML communication diagrams or UML activity diagrams.*Important:* Make sure to describe the diagram and its rationale in the text. *Do not use UML sequence diagrams.*
]
#GOAL[
  - UML State Diagram (File Transfer Lifecycle)
    - States: "Pending," "Uploading," "Uploaded," "Processing," "Available," "Accessed," "Completed."
    - explanation of transitions in text, e.g. 'file accessed by external expert'
  - UML Activity Diagram (Second Opinion Workflow)
    - Steps: Request initiated → Scan uploaded → (Notification sent) → Expert accesses scan → Review completed
]

=== User Interface
#TODO[
  Show mockups of the user interface of the software you develop and their connections / transitions. You can also create a storyboard. *Important:* Describe the mockups and their rationale in the text.
]
#GOAL[
  - Scan Upload Interface
    - Interface allowing technicians to select, upload scans, track progress.
  - Scan Retrieval Interface
    - Interface for external experts: scan access and viewing (and maybe login, notifications, ...)
  - (if permissions and roles are implemented) Admin Panel
    - Interface to manage users, roles, and monitor activities (audit logs, user management).
]